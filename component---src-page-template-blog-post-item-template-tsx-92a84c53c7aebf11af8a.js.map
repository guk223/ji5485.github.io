{"version":3,"sources":["webpack:///./src/components/organisms/PostItemHead.tsx","webpack:///./src/components/molecules/Markdown.tsx","webpack:///./src/hooks/useSetHeading.tsx","webpack:///./src/components/molecules/TableOfContents.tsx","webpack:///./src/components/organisms/PostItemBody.tsx","webpack:///./src/components/molecules/PostNavigator.tsx","webpack:///./src/components/molecules/Utterances.tsx","webpack:///./src/components/organisms/PostItemFoot.tsx","webpack:///./src/components/templates/BlogPostItem.tsx","webpack:///./src/page_template/BlogPostItemTemplate.tsx"],"names":["Title","Text","PostInfo","Categories","TextComponent","Date","PostItemHead","title","date","categories","thumbnail","fluid","alt","map","category","key","shortId","dateFormat","MarkdownComponent","Markdown","html","dangerouslySetInnerHTML","__html","useSetHeading","toc","activeSlug","setActiveSlug","useState","headingElements","setHeadingElements","scrollEvent","i","length","top","getBoundingClientRect","id","useEffect","allHeadingTags","Array","from","window","document","querySelectorAll","getElementsByTarget","addEventListener","removeEventListener","TableOfContentsComponent","TOC","TableOfContents","encodeURI","PostItemBodyComponent","PostItemBody","PostNavigatorComponent","LinkComponent","direction","LinkButton","IconComponent","PostNavigator","slug","to","Icon","type","size","charAt","toUpperCase","slice","Utterances","element","createRef","utterances","createElement","attributes","src","repo","label","theme","body","classList","contains","crossorigin","async","Object","entries","forEach","value","setAttribute","current","appendChild","observer","MutationObserver","mode","message","querySelector","contentWindow","postMessage","changeUtterancesMode","observe","attributeFilter","childList","characterData","disconnect","ref","PostNavigatorContainer","PostItemFoot","prevItem","nextItem","BlogPostItem","postInfo","childImageSharp","PageTemplate","BlogPostItemTemplate","data","markdownRemark","frontmatter","tableOfContents","site","siteMetadata","siteUrl","pageContext","prev","next","PostItemMetaData","description","summary","url","Layout","blogQuery"],"mappings":"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","file":"component---src-page-template-blog-post-item-template-tsx-92a84c53c7aebf11af8a.js","sourcesContent":["import React, { FunctionComponent } from 'react';\nimport styled from '@emotion/styled';\nimport Text, { TextComponent } from 'components/atoms/Text';\nimport Img, { FluidObject } from 'gatsby-image';\nimport { dateFormat, shortId } from 'utilities/utils';\n\ninterface PostItemHeadProps {\n  title: string;\n  date: string;\n  categories: string[];\n  thumbnail: FluidObject;\n}\n\nconst Title = styled(Text)`\n  font-size: 40px;\n  font-weight: 700;\n  margin-top: 30px;\n\n  @media (max-width: 768px) {\n    font-size: 25px;\n  }\n`;\n\nconst PostInfo = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  margin-top: 10px;\n  line-height: 1.5;\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n  }\n`;\n\nconst Categories = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n\n  ${TextComponent} {\n    font-size: 15px;\n    font-weight: 300;\n    margin-right: 15px;\n  }\n\n  @media (max-width: 768px) {\n    ${TextComponent} {\n      font-size: 12px;\n    }\n  }\n`;\n\nconst Date = styled.div`\n  font-size: 15px;\n  font-weight: 300;\n  flex-shrink: 0;\n  padding-left: 30px;\n\n  @media (max-width: 768px) {\n    padding: 0;\n    font-size: 12px;\n  }\n`;\n\nconst PostItemHead: FunctionComponent<PostItemHeadProps> = function ({\n  title,\n  date,\n  categories,\n  thumbnail,\n}) {\n  return (\n    <div>\n      <Img fluid={thumbnail} alt=\"Thumbnail Image\" />\n      <Title>{title}</Title>\n      <PostInfo>\n        <Categories>\n          {categories.map((category: string) => (\n            <Text key={shortId()}>#{category}</Text>\n          ))}\n        </Categories>\n        <Date>{dateFormat(date)}</Date>\n      </PostInfo>\n    </div>\n  );\n};\n\nexport default PostItemHead;\n","import React, { FunctionComponent } from 'react';\nimport styled from '@emotion/styled';\n\ninterface MarkdownProps {\n  html: string;\n}\n\nconst MarkdownComponent = styled.div`\n  display: flex;\n  flex-direction: column;\n  line-height: 1.8;\n  font-size: 17px;\n\n  h1 {\n    font-weight: 700;\n    font-size: 30px;\n    margin-bottom: 40px;\n  }\n\n  h2 {\n    font-weight: 700;\n    font-size: 25px;\n    margin-bottom: 30px;\n  }\n\n  h3 {\n    font-weight: 700;\n    font-size: 20px;\n    margin-bottom: 20px;\n  }\n\n  * + h1 {\n    margin-top: 100px;\n  }\n\n  * + h2 {\n    margin-top: 80px;\n  }\n\n  * + h3 {\n    margin-top: 60px;\n  }\n\n  hr + h1,\n  hr + h2,\n  hr + h3 {\n    margin-top: 0;\n  }\n\n  blockquote {\n    padding: 5px 15px;\n    border-left: 3px solid rgba(30, 31, 32, 0.5);\n    margin: 20px 0;\n  }\n\n  ol,\n  ul {\n    margin-left: 20px;\n    padding: 30px 0;\n  }\n\n  hr {\n    border: 1px solid rgba(30, 31, 32, 0.5);\n    margin: 100px 0;\n  }\n\n  p {\n    padding: 3px 0;\n  }\n\n  a {\n    color: #4263eb;\n    text-decoration: underline;\n  }\n\n  pre[class*='language-'] {\n    margin: 30px 0;\n    padding: 15px;\n    font-size: 15px;\n\n    ::-webkit-scrollbar-thumb {\n      background: rgba(255, 255, 255, 0.5);\n      border-radius: 3px;\n    }\n  }\n\n  code[class*='language-'],\n  pre[class*='language-'] {\n    tab-size: 2;\n  }\n\n  @media (max-width: 768px) {\n    line-height: 1.6;\n    font-size: 16px;\n\n    h1 {\n      font-size: 30px;\n    }\n\n    h2 {\n      font-size: 25px;\n    }\n\n    h3 {\n      font-size: 20px;\n    }\n  }\n`;\n\nconst Markdown: FunctionComponent<MarkdownProps> = function ({ html }) {\n  return <MarkdownComponent dangerouslySetInnerHTML={{ __html: html }} />;\n};\n\nexport default Markdown;\n","import { useState, useEffect } from 'react';\n\nfunction useSetHeading(toc: string): string {\n  const [activeSlug, setActiveSlug] = useState<string>('');\n  const [headingElements, setHeadingElements] = useState<Element[]>([]);\n\n  const scrollEvent = function () {\n    for (let i = headingElements.length - 1; i >= 0; i--) {\n      const { top } = headingElements[i].getBoundingClientRect();\n\n      if (top <= 0.1 && headingElements[i].id !== activeSlug) {\n        setActiveSlug(headingElements[i].id);\n        return;\n      }\n    }\n\n    setActiveSlug('');\n  };\n\n  useEffect(() => {\n    const getElementsByTarget = () => {\n      const allHeadingTags: Element[] = Array.from(window.document.querySelectorAll('h1, h2, h3'));\n      setHeadingElements(allHeadingTags);\n    };\n\n    getElementsByTarget();\n  }, [toc]);\n\n  useEffect(() => {\n    window.addEventListener('scroll', scrollEvent);\n\n    return () => window.removeEventListener('scroll', scrollEvent);\n  }, [headingElements]);\n\n  return activeSlug;\n}\n\nexport default useSetHeading;\n","import React, { FunctionComponent } from 'react';\nimport styled from '@emotion/styled';\nimport useSetHeading from 'hooks/useSetHeading';\n\ninterface TableOfContentsProps {\n  toc: string;\n}\n\nconst TableOfContentsComponent = styled.div`\n  position: relative;\n  width: 250px;\n\n  @media (max-width: 1350px) {\n    display: none;\n  }\n`;\n\nconst TOC = styled.div<{ activeSlug: string }>`\n  position: sticky;\n  top: 150px;\n  border-left: 3px solid rgba(30, 31, 33, 0.5);\n  padding: 5px 0;\n  font-size: 15px;\n\n  a {\n    display: block;\n    padding: 4px 0;\n    opacity: 0.5;\n    transition: 0.3s all;\n  }\n\n  ul,\n  li {\n    list-style-type: none;\n  }\n\n  & ul {\n    padding: 0 10px;\n\n    ul {\n      padding-left: 0 10px;\n    }\n  }\n\n  a[href$='#${({ activeSlug }) => activeSlug}'] {\n    opacity: 1;\n    font-weight: 700;\n  }\n\n  body.dark & {\n    border-color: rgba(255, 255, 255, 0.5);\n  }\n`;\n\nconst TableOfContents: FunctionComponent<TableOfContentsProps> = function ({ toc }) {\n  const activeSlug: string = useSetHeading(toc);\n\n  return (\n    <TableOfContentsComponent>\n      {toc && <TOC dangerouslySetInnerHTML={{ __html: toc }} activeSlug={encodeURI(activeSlug)} />}\n    </TableOfContentsComponent>\n  );\n};\n\nexport default TableOfContents;\n","import React, { FunctionComponent } from 'react';\nimport styled from '@emotion/styled';\nimport Markdown from 'components/molecules/Markdown';\nimport TableOfContents from 'components/molecules/TableOfContents';\n\ninterface PostItemBodyProps {\n  html: string;\n  toc: string;\n}\n\nconst PostItemBodyComponent = styled.div`\n  margin: 150px 0;\n  display: grid;\n  grid-template-columns: 768px 250px;\n  grid-gap: 30px;\n\n  @media (max-width: 1350px) {\n    display: block;\n  }\n\n  @media (max-width: 768px) {\n    margin: 80px 0;\n  }\n`;\n\nconst PostItemBody: FunctionComponent<PostItemBodyProps> = function ({ html, toc }) {\n  return (\n    <PostItemBodyComponent>\n      <Markdown html={html} />\n      <TableOfContents toc={toc} />\n    </PostItemBodyComponent>\n  );\n};\n\nexport default PostItemBody;\n","import React, { FunctionComponent } from 'react';\nimport styled from '@emotion/styled';\nimport Icon, { IconComponent } from 'components/atoms/Icon';\nimport Text from 'components/atoms/Text';\nimport { LinkComponent } from 'components/atoms/Link';\n\ninterface PostNavigatorProps {\n  direction: 'prev' | 'next';\n  slug: string;\n  title: string;\n}\n\nconst PostNavigatorComponent = styled(LinkComponent)<{ direction: string }>`\n  width: 47%;\n  display: flex;\n  flex-direction: column;\n  ${({ direction }) =>\n    direction === 'next'\n      ? `\n    align-items: flex-end;\n    margin-left: auto;\n  `\n      : ''}\n`;\n\nconst LinkButton = styled.div<{ direction: string }>`\n  display: flex;\n  flex-direction: ${({ direction }) => `row${direction === 'prev' ? '' : '-reverse'}`};\n  align-items: center;\n  font-size: 18px;\n  margin-bottom: 15px;\n\n  ${IconComponent} {\n    ${({ direction }) => `margin-${direction === 'prev' ? 'right' : 'left'}`}: 15px;\n  }\n`;\n\nconst Title = styled(Text)<{ direction: string }>`\n  font-size: 18px;\n  font-weight: 300;\n  ${({ direction }) => `text-align: ${direction === 'prev' ? 'left' : 'right'}`};\n\n  @media (max-width: 768px) {\n    font-size: 13px;\n  }\n`;\n\nconst PostNavigator: FunctionComponent<PostNavigatorProps> = function ({ direction, slug, title }) {\n  return (\n    <PostNavigatorComponent to={slug} direction={direction}>\n      <LinkButton direction={direction}>\n        <Icon type={`arrow${direction === 'prev' ? 'Left' : 'Right'}`} size={20} />\n        <Text>{direction.charAt(0).toUpperCase() + direction.slice(1)}</Text>\n      </LinkButton>\n\n      <Title direction={direction}>{title}</Title>\n    </PostNavigatorComponent>\n  );\n};\n\nexport default PostNavigator;\n","import React, { createRef, FunctionComponent, useEffect } from 'react';\n\nconst src = 'https://utteranc.es/client.js';\nconst repo = 'ji5485/ji5485.github.io';\n\nconst Utterances: FunctionComponent = function ({}) {\n  const element = createRef<HTMLDivElement>();\n\n  useEffect(() => {\n    const utterances = document.createElement('script');\n    const initialMode = window.document.body.classList.contains('dark') ? 'dark' : 'light';\n\n    const attributes = {\n      src,\n      repo,\n      'issue-term': 'pathname',\n      label: 'utterances-comment',\n      theme: `github-${initialMode}`,\n      crossorigin: 'anonymous',\n      async: true,\n    };\n\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, value);\n    });\n\n    element.current.appendChild(utterances);\n\n    const changeUtterancesMode = (mode: string) => {\n      const utterances = document.querySelector('iframe.utterances-frame').contentWindow;\n\n      const message = {\n        type: 'set-theme',\n        theme: `github-${mode}`,\n      };\n\n      utterances.postMessage(message, 'https://utteranc.es');\n    };\n\n    const observer = new MutationObserver(() => {\n      const currentMode = window.document.body.classList.contains('dark') ? 'dark' : 'light';\n      changeUtterancesMode(currentMode);\n    });\n\n    observer.observe(window.document.body, {\n      attributes: true,\n      attributeFilter: ['class'],\n      childList: false,\n      characterData: false,\n    });\n\n    return () => observer.disconnect();\n  }, []);\n\n  return <div ref={element} />;\n};\n\nexport default Utterances;\n","import React, { FunctionComponent } from 'react';\nimport styled from '@emotion/styled';\nimport PostNavigator from 'components/molecules/PostNavigator';\nimport Utterances from 'components/molecules/Utterances';\n\nexport type OtherItemInfo = {\n  slug: string;\n  title: string;\n};\n\ninterface PostItemFootProps {\n  prevItem: OtherItemInfo | null;\n  nextItem: OtherItemInfo | null;\n}\n\nconst PostNavigatorContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 60px;\n`;\n\nconst PostItemFoot: FunctionComponent<PostItemFootProps> = function ({ prevItem, nextItem }) {\n  return (\n    <div>\n      <PostNavigatorContainer>\n        {prevItem && <PostNavigator direction=\"prev\" {...prevItem} />}\n        {nextItem && <PostNavigator direction=\"next\" {...nextItem} />}\n      </PostNavigatorContainer>\n\n      <Utterances />\n    </div>\n  );\n};\n\nexport default PostItemFoot;\n","import React, { FunctionComponent } from 'react';\nimport PageTemplate from 'components/templates/PageTemplate';\nimport PostItemHead from 'components/organisms/PostItemHead';\nimport PostItemBody from 'components/organisms/PostItemBody';\nimport PostItemFoot from 'components/organisms/PostItemFoot';\nimport { FluidObject } from 'gatsby-image';\n\ninterface BlogPostItemProps {\n  postInfo: {\n    title: string;\n    date: string;\n    categories: string[];\n    thumbnail: {\n      childImageSharp: {\n        fluid: FluidObject;\n      };\n    };\n  };\n  html: string;\n  prevItem: string;\n  nextItem: string;\n  toc: string;\n}\n\nconst BlogPostItem: FunctionComponent<BlogPostItemProps> = function ({\n  postInfo: {\n    title,\n    date,\n    categories,\n    thumbnail: {\n      childImageSharp: { fluid },\n    },\n  },\n  html,\n  prevItem,\n  nextItem,\n  toc,\n}) {\n  return (\n    <PageTemplate>\n      <PostItemHead title={title} date={date} categories={categories} thumbnail={fluid} />\n      <PostItemBody html={html} toc={toc} />\n      <PostItemFoot prevItem={prevItem} nextItem={nextItem} />\n    </PageTemplate>\n  );\n};\n\nexport default BlogPostItem;\n","import React, { FunctionComponent } from 'react';\nimport { graphql } from 'gatsby';\nimport { OtherItemInfo } from 'components/organisms/PostItemFoot';\nimport Layout from 'components/templates/Layout';\nimport BlogPostItem from 'components/templates/BlogPostItem';\nimport { FluidObject } from 'gatsby-image';\n\ninterface BlogPostItemTemplateProps {\n  data: {\n    markdownRemark: {\n      html: string;\n      frontmatter: {\n        title: string;\n        date: string;\n        summary: string;\n        categories: string[];\n        thumbnail: {\n          childImageSharp: {\n            fluid: FluidObject;\n          };\n        };\n      };\n      tableOfContents: string;\n    };\n    site: {\n      siteMetadata: {\n        siteUrl: string;\n      };\n    };\n  };\n  pageContext: {\n    prev: OtherItemInfo | null;\n    next: OtherItemInfo | null;\n    slug: string;\n  };\n}\n\nconst BlogPostItemTemplate: FunctionComponent<BlogPostItemTemplateProps> = function ({\n  data: {\n    markdownRemark: { html, frontmatter, tableOfContents },\n    site: {\n      siteMetadata: { siteUrl },\n    },\n  },\n  pageContext: { prev, next, slug },\n}) {\n  const PostItemMetaData = {\n    title: frontmatter.title,\n    description: frontmatter.summary,\n    url: siteUrl + slug,\n  };\n\n  return (\n    <Layout {...PostItemMetaData}>\n      <BlogPostItem\n        postInfo={frontmatter}\n        html={html}\n        prevItem={prev}\n        nextItem={next}\n        toc={tableOfContents}\n      />\n    </Layout>\n  );\n};\n\nexport default BlogPostItemTemplate;\n\nexport const blogQuery = graphql`\n  query getBlogData($slug: String) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        title\n        date\n        summary\n        categories\n        thumbnail {\n          childImageSharp {\n            fluid(maxWidth: 768, maxHeight: 450, fit: FILL, quality: 100) {\n              ...GatsbyImageSharpFluid_withWebp\n            }\n          }\n        }\n      }\n      tableOfContents\n    }\n    site {\n      siteMetadata {\n        siteUrl\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}